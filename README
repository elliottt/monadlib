1.4 (18 April 2005):
  - Split the Monad.Prelude into multiple files: now we have extra files
    called Monad.Combinators and Monad.ForEach
  - Added 'do<Effect>' functions to the monad prelude.  These make it easy to 
    turn a pure representation of an effectful computation into an actual 
    computation.
  - Changes to Writer/WriterT:
    * We are back to using the Monoid class
    * Now it is strict in the output
    (the previous implementation was too inefficient)
  

1.3.1 (28 March 2005):
  - Made Monad.Writer and Monad.WriteT export the monoid library.

1.3 (20 March 2005):
  - Added a class 'ForEach' to the Monad.Prelude.
    It is used to apply a monadic function to all elements in a container.
    It is like the 'fmapM' combinator added recently to the hirarchical
    libraries, but the arguments are the other way around.

1.2.3 (17 March 2005):
  - Added a method 'handle_' for handlers that do not need the exception.

1.2.2 (11 March 2005):
  - Changed build system to use Cabal infrastructure

1.2.1 (27 Feb 2005):
  - Added a function 'mapBuffer' to Monad.Prelude

1.2 (22 Feb 2005):
  - Added a type for monoids, in Monad.Monoid.  This is not specific to the 
    monad library and should be moved somewhere else.
  - Changed the interface to Writer monads to be more like it used to be in mtl.
    In 'Writer w a', the type variable 'w' is the type of the whole buffer,
    not just the elemnets of the buffer.  We do not use the Monoid class 
    currently available in the library, as it is too inconvenient.  Instead
    we use the Monoid type (see the above change).

1.1: 
  - Added a class and instances for 'BaseM'. 
     It provides an easy means to execute a computation
     in the base layer of a tower of monads.
  - Added 'update_' and 'poke_' functions that do not return a value.

1.0: Original version

